version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udacity-frontend-${CIRCLE_WORKFLOW_ID}"
            aws cloudformation delete-stack --stack-name "udacity-backend-${CIRCLE_WORKFLOW_ID}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            SUCCESS=`curl -H "token: 4a79f8c5-dbf1-446c-bbdb-aeb7df391ab5" --request GET \
              https://api.memstash.io/values/migration-d5d144df-a14a-4d0d-aab3-d2ce1af678b9`
            if(( $SUCCESS == false ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ~/project/frontend
            npm install all
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd ~/project/backend
            npm install all
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd ~/project/frontend/
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node-modules]
          key: frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd ~/project/backend/
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Front-end scan
          command: |
            cd ~/project/frontend
            npm install
            npm audit fix --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Backend-end scan
          command: |
            cd ~/project/backend
            npm install
            npm audit fix --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar
          command: |
            yum install tar -y
            yum install gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="Udacity-cdond-project-backend" \
              --stack-name "udacity-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="Udacity-cdond-project-frontend" \
              --stack-name "udacity-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd ~/project/.circleci/ansible/
            aws ec2 describe-instances \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --filters "Name=tag-value,Values=Udacity-cdond-project-backend" \
               --output text >> inventory.txt
      - persist_to_workspace:
          root: ~/project/.circleci/
          paths:
            - ansible/inventory.txt
      - run:
          name: get public dns name of ec2 instance
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --filters "Name=tag-value,Values=Udacity-cdond-project-backend" \
              --output text >> PublicDnsName
      - save_cache:
          key: ec2Url
          paths:
            - ~/project/.circleci/ansible/PublicDnsName
      - run:
          name: save backend url to memstash.io
          restore_cache:
            key: ec2Url
          command: |
            BACKEND_URL=`cat PublicDnsName`
            echo $BACKEND_URL
            curl -H "Content-Type: text/plain" -H "token: d36b76e8-a38c-4ded-887b-2a4d0c7cab38" \
              --request PUT --data $BACKEND_URL \
              https://api.memstash.io/values/backend-url
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5e:44:44:31:37:0a:25:8a:9c:f1:38:72:7f:aa:63:c6"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip3 install awscli
      - attach_workspace:
          at: ~/project/.circleci/
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo NODE_ENV=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/*/.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd ~/project/.circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: [ "5e:44:44:31:37:0a:25:8a:9c:f1:38:72:7f:aa:63:c6" ]
      - run:
          name: Install awscli
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -qq install awscli
            sudo apt-get -y -qq install python3
      # attach workspace
      - attach_workspace:
          at: ~/project/.circleci/
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd ~/project/backend
            npm install
            npm run build
            npm run migrations > output.txt
            cat output.txt
      - run:
          name: Send migration results to memstash
          command: |
            cd ~/project/backend
            curl -H "Content-Type: text/plain" -H "token: 4a79f8c5-dbf1-446c-bbdb-aeb7df391ab5" \
              --request PUT --data "false" \
              https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID}
            if grep "has been executed successfully" output.txt; then \
              echo "DB migration sucessful"
              curl -H "Content-Type: text/plain" -H "token: 4a79f8c5-dbf1-446c-bbdb-aeb7df391ab5" \
                --request PUT --data "true" \
                https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID}
            fi
      - revert-migrations
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_URL=`curl -H "token: d36b76e8-a38c-4ded-887b-2a4d0c7cab38" --request \
              GET https://api.memstash.io/values/backend-url`
            echo "${BACKEND_URL}"
            export API_URL="${BACKEND_URL}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            cd ~/project/frontend
            npm install
            npm run build
            aws s3 cp ./dist s3://udapeople-ymjvctz29a0smouk7o4i --recursive
            npm install webpack-dev-server -g
      - revert-migrations
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: [ "5e:44:44:31:37:0a:25:8a:9c:f1:38:72:7f:aa:63:c6" ]
      # attach workspace
      - attach_workspace:
          at: ~/project/.circleci/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update tar gzip curl nodejs npm
            pip3 install awscli
      - run:
          name: Deploy backend
          command: |
            cd ~/project/.circleci/ansible
            tar -C ~/project/backend -czvf artifact.tar.gz .
            mv artifact.tar.gz ~/project/backend
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl
            apk add --update nodejs
            pip3 install awscli
      - run:
          name: Get backend url and test it
          command: |
            BACKEND_URL=`curl -H "token: d36b76e8-a38c-4ded-887b-2a4d0c7cab38" --request \
              GET https://api.memstash.io/values/backend-url`
            echo $BACKEND_URL
            curl https://$BACKEND_URL:3030/api/status
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL="http://udapeople-mjvctz29a0smouk7o4i.s3-website-us-east-1.amazonaws.com"
            echo $FRONTEND_URL
            if curl -s ${FRONTEND_URL} | grep "Welcome"
            then
              return 1
            else
              return 0
            fi
      # Here's where you will add some code to rollback on failure
      - revert-migrations
      - destroy-environment

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl tar gzip
      - run:
          name: Update cloudfront distribution
          command: |
            cd ~/project/.circleci/files
            CF_STACK_ID=`aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate \
              --output text`
            aws cloudformatin deploy \
            -- template-file cloudfront.yml \
            -- stack-name \
            -- parameter-overrides WorkflowID="${CF_STACK_ID}" \
            -- tags project=udapeople
      # Here's where you will add some code to rollback on failure

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [ run-migrations ]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
