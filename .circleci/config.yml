version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "udacity-frontend-${CIRCLE_WORKFLOW_ID}"
            aws cloudformation delete-stack --stack-name "udacity-backend-${CIRCLE_WORKFLOW_ID}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd ~/project/frontend
            npm install
            npm run lint
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd ~/project/backend
            npm install
            npm run lint
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd ~/project/frontend
            npm test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Back-end test
          command: |
            cd ~/project/backend
            npm test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
            cd ~/project/frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Backend-end scan
          command: |
            cd ~/project/backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar
          command: |
            yum install tar -y
            yum install gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="Udacity-cdond-project-backend" \
              --stack-name "udacity-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project="Udacity-cdond-project-frontend" \
              --stack-name "udacity-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd ~/project/.circleci/ansible/
            echo "[web]" > inventory.txt
            aws ec2 describe-instances \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --filters "Name=tag-value,Values=Udacity-cdond-project-backend" \
               --output text >> inventory.txt
      - persist_to_workspace:
          root: ~/project/.circleci/
          paths:
            - ansible/inventory.txt
      - run:
          name: get public dns name of ec2 instance
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicDnsName' \
              --output text >> PublicDnsName
      - save_cache:
          key: ec2Url
          paths:
            - ~/project/.circleci/ansible/PublicDnsName
      - run:
          name: save backend url to memstash.io
          restore_cache:
            key: ec2Url
          command: |
            curl -H "Content-Type: text/plain" -H "token: d36b76e8-a38c-4ded-887b-2a4d0c7cab38" \
              --request PUT --data "https://`cat PublicDnsName`"\
              https://api.memstash.io/values/backend-url
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["5e:44:44:31:37:0a:25:8a:9c:f1:38:72:7f:aa:63:c6"]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip3 install awscli
      # attach workspace
      - attach_workspace:
          at: ~/project/.circleci/
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible/
            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: [ "5e:44:44:31:37:0a:25:8a:9c:f1:38:72:7f:aa:63:c6" ]
      - run:
          name: Install dependencies
          command: |
            npm install node-ansible --save
            npm audit fix
            pip3 install awscli
      # attach workspace
      - attach_workspace:
          at: ~/project/.circleci/
      - run:
          name: Run migrations
          command: |
            cd ~/project/.circleci/ansible/
            ansible-playbook -i inventory.txt deploy-backend.yml
#            if grep "has been executed successfully" output.txt; then \
#              curl -H "Content-Type: text/plain" -H "token: 4a79f8c5-dbf1-446c-bbdb-aeb7df391ab5" \
#              --request PUT --data "1" \
#              https://api.memstash.io/values/migration-d5d144df-a14a-4d0d-aab3-d2ce1af678b9migration_${CIRCLE_WORKFLOW_ID}; \
#            fi
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
      # Here's where you will add some code to rollback on failure
      - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
